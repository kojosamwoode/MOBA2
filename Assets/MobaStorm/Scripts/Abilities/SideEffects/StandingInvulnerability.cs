using UnityEngine;
using System.Collections;
using System;
#if UNITY_EDITOR
using UnityEditor;
#endif

public class StandingInvulnerability : SideEffect
{

    public StandingInvulnerability(StandingInvulnerability sideEffect) : base(sideEffect) 
    {

    }
    public override SideEffect Clone()
    {
        return new StandingInvulnerability(this);
    }

    public override void ApplyEffect(Ability ability, MobaEntity attacker, MobaEntity reciever)
    {
        base.ApplyEffect(ability,attacker, reciever);
        reciever.OnRecieveDamageProcessStart += ModifyDamageMultiplier;
        reciever.EntityAnimator.OnAnimationStateChanged += OnEntityStateChanged;

    }

    private void OnEntityStateChanged(EEntityState state)
    {
        Isfinish = true;
    }

    public void ModifyDamageMultiplier(DamageProcess process)
    {
        process.AdBResMod = 0;
        process.ApBResMod = 0;
    }

    public override void ProcessEffect()
    {
        base.ProcessEffect();
    }

    public override void RemoveEffect()
    {
        base.RemoveEffect();
        m_reciever.OnRecieveDamageProcessStart -= ModifyDamageMultiplier;
        m_reciever.EntityAnimator.OnAnimationStateChanged -= OnEntityStateChanged;
    }

    public override int DrawEffect(int xPos, int yPos, GUISkin skin)
    {

        yPos = base.DrawEffect(xPos, yPos, skin);
#if UNITY_EDITOR
        EditorUtility.SetDirty(this);
#endif
        return yPos;

    }

}
